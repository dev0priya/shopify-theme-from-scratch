{% comment %}
  This section contains the JavaScript that powers the product page.
  The main 'VariantSelector' class handles updating the product image, price,
  and add-to-cart button when a new color swatch is selected.
{% endcomment %}
<script>
  class VariantSelector extends HTMLElement {
    constructor() {
      super();
      this.addEventListener('change', this.onVariantChange);
      this.variantData = JSON.parse(this.querySelector('[type="application/json"]').textContent);
    }

    onVariantChange() {
      this.updateSelectedVariant();
      if (!this.currentVariant) return;
      this.updateURL();
      this.updateFeaturedImage();
      this.updatePrice();
      this.updateAddToCartButton();
    }

    updateSelectedVariant() {
      const options = Array.from(this.querySelectorAll('input[type=radio]:checked'), (input) => input.value);
      this.currentVariant = this.variantData.find((variant) => {
        return !variant.options.map((option, index) => {
          return options[index] === option;
        }).includes(false);
      });
    }

    updateURL() {
      if (!this.currentVariant) return;
      window.history.replaceState({}, '', `${this.dataset.url}?variant=${this.currentVariant.id}`);
    }

    updateFeaturedImage() {
      const mainImage = document.getElementById('MainProductImage');
      if (!this.currentVariant || !this.currentVariant.featured_image) return;
      mainImage.src = this.currentVariant.featured_image.src;
      mainImage.alt = this.currentVariant.featured_image.alt;
    }

    updatePrice() {
      const priceElement = document.getElementById('ProductPrice');
      if (!this.currentVariant) return;
      priceElement.textContent = new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' }).format(this.currentVariant.price / 100);
    }

    updateAddToCartButton() {
      const addButton = document.getElementById('AddToCartButton');
      const addButtonText = document.getElementById('AddToCartText');
      const variantIdInput = document.getElementById('ProductVariantId');

      if (!this.currentVariant) {
        addButton.setAttribute('disabled', true);
        addButtonText.textContent = 'Unavailable';
      } else if (!this.currentVariant.available) {
        addButton.setAttribute('disabled', true);
        addButtonText.textContent = 'Sold Out';
      } else {
        addButton.removeAttribute('disabled');
        const defaultText = addButton.dataset.defaultText || 'Add to Cart';
        addButtonText.textContent = defaultText;
        variantIdInput.value = this.currentVariant.id;
      }
    }
  }

  customElements.define('variant-selector', VariantSelector);
</script>


<div class="container">
  <div class="product-page">
    <div class="product-image-gallery">
      {% comment %} The product thumbnails have been removed. {% endcomment %}
      <div class="product-image">
        <img id="MainProductImage" src="{{ product.featured_image | image_url: width: 800 }}" alt="{{ product.title }}">
      </div>
    </div>

    <div class="product-details">
      {% for block in section.blocks %}
        {% case block.type %}
          {% when 'title' %}
            <h1 class="product-title">{{ product.title }}</h1>
          {% when 'price' %}
            <p id="ProductPrice" class="product-price">{{ product.price | money }}</p>
          {% when 'color_swatch' %}
            {% comment %}
              MODIFIED: This now finds the variant image for each color
              and displays it in the swatch instead of a solid color.
            {% endcomment %}
            {%- liquid
              assign color_option = null
              for option in product.options_with_values
                if option.name == 'Color'
                  assign color_option = option
                  break
                endif
              endfor
            -%}

            {% if color_option %}
              <variant-selector data-url="{{ product.url }}">
                <script type="application/json">
                  {{ product.variants | json }}
                </script>
                  <fieldset class="variant-fieldset">
                    <legend class="variant-legend">{{ color_option.name }}</legend>
                    <div class="variant-options">
                      {% for value in color_option.values %}
                        {%- liquid
                          assign swatch_variant = null
                          for variant in product.variants
                            if variant.options contains value
                              assign swatch_variant = variant
                              break
                            endif
                          endfor
                        -%}
                        <input type="radio" id="color-{{ forloop.index }}" name="option-{{ color_option.position }}" value="{{ value }}" {% if color_option.selected_value == value %}checked{% endif %}>
                        <label
                          for="color-{{ forloop.index }}"
                          class="variant-label color-swatch"
                          style="background-image: url({{ swatch_variant.featured_image | image_url: width: 100 }});"
                          title="{{ value }}">
                        </label>
                      {% endfor %}
                    </div>
                  </fieldset>
              </variant-selector>
            {% endif %}

          {% when 'description' %}
            <div class="product-description">{{ product.description }}</div>
          {% when 'add_to_cart' %}
            {%- liquid
              assign default_text = block.settings.add_to_cart_text | default: "Add to Cart"
            -%}
            {% form 'product', product, id: 'product-form' %}
              <input type="hidden" name="id" id="ProductVariantId" value="{{ product.selected_or_first_available_variant.id }}">
              <button type="submit" id="AddToCartButton" class="add-to-cart-btn" data-default-text="{{ default_text }}" {% if product.selected_or_first_available_variant.available == false %}disabled{% endif %}>
                <span id="AddToCartText">
                  {% if product.selected_or_first_available_variant.available %}
                    {{ default_text }}
                  {% else %}
                    Sold Out
                  {% endif %}
                </span>
              </button>
            {% endform %}
        {% endcase %}
      {% endfor %}
    </div>
  </div>
</div>

{% schema %}
{
  "name": "Main Product",
  "blocks": [
    { "type": "@app" },
    { "type": "title", "name": "Title", "limit": 1 },
    { "type": "price", "name": "Price", "limit": 1 },
    { "type": "color_swatch", "name": "Color Swatch", "limit": 1 },
    { "type": "description", "name": "Description", "limit": 1 },
    { "type": "add_to_cart", "name": "Add to Cart Button", "limit": 1,
      "settings": [
        { "type": "text", "id": "add_to_cart_text", "label": "Add to Cart Button Text", "default": "Add to Cart" }
      ]
    }
  ],
   "presets": [
    { "name": "Main Product", "category": "Product",
      "blocks": [
        { "type": "title" },
        { "type": "price" },
        { "type": "color_swatch" },
        { "type": "add_to_cart" },
        { "type": "description" }
      ]
    }
  ]
}
{% endschema %}

{% comment %}
  The cart drawer functionality is kept as is.
  No changes were needed here.
{% endcomment %}
<script>
  document.addEventListener('DOMContentLoaded', () => {
    const cartDrawer = document.querySelector('sidebar-drawer');
    const productForm = document.getElementById('product-form');

    productForm?.addEventListener('submit', function(event) {
      event.preventDefault();
      fetch('/cart/add.js', {
        method: 'POST',
        body: new FormData(productForm)
      })
      .then(response => response.json())
      .then(() => {
        updateAndOpenDrawer();
      }).catch(error => console.error('Error:', error));
    });

    cartDrawer?.querySelector('.sidebar-drawer__close-btn')?.addEventListener('click', () => cartDrawer.classList.remove('is-open'));
    cartDrawer?.querySelector('.sidebar-overlay')?.addEventListener('click', () => cartDrawer.classList.remove('is-open'));

    function updateAndOpenDrawer() {
      fetch('/cart.js').then(response => response.json()).then(cart => {
        const container = cartDrawer.querySelector('[data-cart-items-container]');
        const template = cartDrawer.querySelector('[data-cart-item-template]');
        
        container.innerHTML = '';

        cart.items.forEach(item => {
          const itemHtml = template.innerHTML
            .replace('{KEY}', item.key)
            .replace(/{IMAGE_URL}/g, item.image)
            .replace(/{PRODUCT_TITLE}/g, item.product_title)
            .replace('{PRICE}', new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' }).format(item.final_price / 100))
            .replace('{QUANTITY}', item.quantity);
          container.innerHTML += itemHtml;
        });

        const moneyFormat = new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' });
        cartDrawer.querySelector('[data-cart-subtotal]').textContent = moneyFormat.format(cart.total_price / 100);
        cartDrawer.querySelector('[data-cart-total]').textContent = moneyFormat.format(cart.total_price / 100);
        
        cartDrawer.classList.add('is-open');
      });
    }
  });
</script>

{% stylesheet %}
html, body {
  margin: 0; padding: 0;
  overflow-x: hidden;
}
.container {
  max-width: 1200px;
  margin: 0 auto;
  width: 100%;
  box-sizing: border-box; padding: 0 16px;
}
.product-page {
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  margin: 40px auto;
  background: #fff;
  border-radius: 8px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.07);
  overflow: hidden;
}

.product-image-gallery {
  flex: 1;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 32px;
  background: #f7f7f7;
  height: 450px;
}
.product-image {
  flex: 1;
  display: flex;
  align-items: center;
  justify-content: center;
  height: 100%;
}

.product-image img {
  width: auto;
  height: 100%;
  max-width: 450px;
  border-radius: 8px;
  object-fit: cover;
}

/* --- START: CSS for Image Swatches --- */
.color-swatch {
  height: 50px; /* Increased size slightly for better image visibility */
  width: 50px;
  border-radius: 50%;
  border: 2px solid #ccc;
  cursor: pointer;
  transition: all 0.2s ease;
  padding: 0;
  /* New properties to handle the background image */
  background-size: cover;
  background-position: center;
  background-repeat: no-repeat;
}
.variant-options input[type="radio"]:checked + .color-swatch {
  border-color: #0070f3;
  transform: scale(1.1);
  box-shadow: 0 0 8px rgba(0, 112, 243, 0.5);
}
/* --- END: CSS for Image Swatches --- */

.product-details {
  flex: 1;
  padding: 32px;
  display: flex;
  flex-direction: column;
  justify-content: center;
}
.product-title {
  font-size: 2rem;
  margin-bottom: 16px;
  color: #333;
}
.product-price {
  font-size: 1.5rem;
  color: #2d2d2d;
  margin-bottom: 24px;
}
.variant-fieldset {
  border: none;
  padding: 0;
  margin: 0 0 24px 0;
}
.variant-legend {
  font-weight: bold;
  margin-bottom: 12px;
  font-size: 1rem;
}
.variant-options {
  display: flex;
  flex-wrap: wrap;
  gap: 12px;
}
.variant-options input[type="radio"] { display: none; }

.add-to-cart-btn {
  padding: 12px 32px;
  background: #0070f3;
  color: #fff;
  border: none;
  border-radius: 4px;
  font-size: 1rem;
  cursor: pointer; transition: background 0.2s ease;
  margin-top: 16px;
}
.add-to-cart-btn:hover:not([disabled]) { background: #005bb5; }
.add-to-cart-btn:disabled {
  background-color: #ccc;
  cursor: not-allowed;
}
.product-description {
  margin-top: 16px;
  font-size: 1rem;
  color: #555;
  line-height: 1.6;
}

@media (max-width: 900px) {
  .product-page { flex-direction: column; }
  .product-details { padding: 24px; }
  .product-title { font-size: 1.8rem; }
  .product-price { font-size: 1.4rem; }
  .add-to-cart-btn { font-size: 0.9rem; padding: 10px 24px; }
}
@media (max-width: 400px) {
  .product-image-gallery { height: 400px; }
  .product-title { font-size: 1.6rem; }
  .product-price { font-size: 1.2rem; }
  .add-to-cart-btn { font-size: 0.85rem; padding: 8px 20px; }
  .product-description { font-size: 0.9rem; }
}

/* Side Cart Drawer CSS - No changes made here */
sidebar-drawer {
  position: fixed; top: 0; right: 0; width: 100%; height: 100%; z-index: 1000; visibility: hidden; transition: visibility 0.3s;
}
sidebar-drawer.is-open { visibility: visible; }
.sidebar-overlay {
  position: absolute; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.5); opacity: 0;
  transition: opacity 0.3s;
}
sidebar-drawer.is-open .sidebar-overlay { opacity: 1; }
.sidebar-drawer__container {
  position: absolute; top: 0; right: 0; width: 100%;
  max-width: 420px; height: 100%; background-color: #fff; transform: translateX(100%); transition: transform 0.3s; display: flex; flex-direction: column;
}
sidebar-drawer.is-open .sidebar-drawer__container { transform: translateX(0); }
.sidebar-drawer__header { padding: 16px 20px; display: flex; justify-content: space-between; align-items: center; border-bottom: 1px solid #e5e5e5; }
.sidebar-drawer__content { flex-grow: 1; overflow-y: auto; padding: 20px; }
.sidebar-drawer__footer { padding: 20px; border-top: 1px solid #e5e5e5; }
.cart-summary { display: flex; justify-content: space-between; margin-bottom: 10px; }
.checkout-btn { display: block; width: 100%; text-align: center; background: #0070f3; color: white; padding: 14px; text-decoration: none; border-radius: 4px; margin-top: 16px; }
.cart-item { display: flex; gap: 16px; margin-bottom: 20px; align-items: center; }
.cart-item__image img { width: 90px; height: 90px; object-fit: cover; border-radius: 4px; }
{% endstylesheet %}