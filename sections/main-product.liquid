<script>
  class ProductVariantManager {
    constructor(container) {
      this.container = container;
      this.variantData = JSON.parse(this.container.querySelector('[data-variant-json]').textContent);
      this.mainImage = document.getElementById('MainProductImage');
      this.priceElement = document.getElementById('ProductPrice');
      this.addToCartButton = document.getElementById('AddToCartButton');
      this.addToCartText = document.getElementById('AddToCartText');
      this.variantIdInput = document.getElementById('ProductVariantId');
      this.init();
    }
    init() {
      const optionLabels = this.container.querySelectorAll('[data-option-label]');
      optionLabels.forEach(label => {
        label.addEventListener('click', (event) => {
          event.preventDefault();
          const forId = label.getAttribute('for');
          const radioButton = document.getElementById(forId);
          if (radioButton) {
            radioButton.checked = true;
            this.onVariantChange();
          }
        });
      });
      this.onVariantChange();
    }
    onVariantChange() {
      const selectedOptions = this._getSelectedOptions();
      const currentVariant = this._findVariant(selectedOptions);
      this._updateActiveStyles(selectedOptions);
      this._updateMasterImage(currentVariant);
      this._updatePrice(currentVariant);
      this._updateAddToCartButton(currentVariant);
      this._updateURL(currentVariant);
    }
    _getSelectedOptions() {
      const selectedRadios = this.container.querySelectorAll('input[type="radio"]:checked');
      const options = [];
      selectedRadios.forEach(radio => options.push(radio.value));
      return options;
    }
    _findVariant(selectedOptions) {
      return this.variantData.find(variant => {
        return selectedOptions.every((optionValue, index) => {
          return variant.options[index] === optionValue;
        });
      });
    }
    _updateActiveStyles(selectedOptions) {
      const allLabels = this.container.querySelectorAll('[data-option-label]');
      allLabels.forEach(label => label.classList.remove('active'));
      selectedOptions.forEach((value, index) => {
        const valueHandle = value.replace(/\s+/g, '-').toLowerCase();
        const activeLabel = this.container.querySelector(`[for="option-${index + 1}-${valueHandle}"]`);
        if (activeLabel) {
          activeLabel.classList.add('active');
        }
      });
    }
    _updateMasterImage(variant) {
      if (!variant || !variant.featured_image) return;
      this.mainImage.src = variant.featured_image.src;
      this.mainImage.alt = variant.featured_image.alt;
    }
    _updatePrice(variant) {
      if (!variant) return;
      this.priceElement.textContent = new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' }).format(variant.price / 100);
    }
    _updateAddToCartButton(variant) {
      if (!variant) {
        this.addToCartButton.setAttribute('disabled', true);
        this.addToCartText.textContent = 'Unavailable';
      } else if (!variant.available) {
        this.addToCartButton.setAttribute('disabled', true);
        this.addToCartText.textContent = 'Sold Out';
      } else {
        this.addToCartButton.removeAttribute('disabled');
        this.addToCartText.textContent = this.addToCartButton.dataset.defaultText || 'Add to Cart';
        this.variantIdInput.value = variant.id;
      }
    }
    _updateURL(variant) {
      if (!variant) return;
      window.history.replaceState({}, '', `?variant=${variant.id}`);
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    const productContainer = document.querySelector('[data-product-container]');
    if (productContainer) {
      new ProductVariantManager(productContainer);
    }
  });
</script>

<div class="container" data-product-container>
  <div class="product-page">
    <div class="product-image-gallery">
      <div class="product-image">
        <img id="MainProductImage" src="{{ product.featured_image | image_url: width: 800 }}" alt="{{ product.title }}">
      </div>
    </div>
    <div class="product-details">
      {% for block in section.blocks %}
        {% case block.type %}
          {% when 'title' %}
            <h1 class="product-title">{{ product.title }}</h1>
          {% when 'price' %}
            <p id="ProductPrice" class="product-price">{{ product.price | money }}</p>
          {% when 'variant_picker' %}
            <script data-variant-json type="application/json">
              {{ product.variants | json }}
            </script>
            {% unless product.has_only_default_variant %}
              {% for option in product.options_with_values %}
                <fieldset class="variant-fieldset">
                  {%- liquid
                    assign option_name_cleaned = option.name | strip | downcase
                  -%}
                  <legend class="variant-legend">
                    {{ option.name }}
                  </legend>
            
                  <div class="variant-options">
                    {% for value in option.values %}
                      {% assign value_handle = value | handle %}
                      <input 
                        type="radio" 
                        class="visually-hidden"
                        id="option-{{ option.position }}-{{ value_handle }}" 
                        name="option-{{ option.position }}" 
                        value="{{ value }}" 
                        {% if option.selected_value == value %}checked{% endif %}
                      >
                      {% if option_name_cleaned == 'color' or option_name_cleaned == 'colour' %}
                        {%- liquid
                          assign variant_for_swatch = null
                          for variant in product.variants
                            if variant.option1 == value and variant.featured_image != null
                              assign variant_for_swatch = variant
                              break
                            endif
                          endfor
                        -%}
 
                        {% comment %} MODIFIED: Added a wrapper and a span for the color name {% endcomment %}
                        <label 
                          for="option-{{ option.position }}-{{ value_handle }}" 
                          class="variant-label variant-label--color" 
                          title="{{ value }}"
                          data-option-label
                        >
                          <div class="swatch-content-wrapper">
                            {% if variant_for_swatch %}
                              <img class="color-swatch-image" src="{{ variant_for_swatch.featured_image | image_url: width: 100 }}" alt="{{ value }}">
                            {% else %}
                              <span class="color-swatch swatch-{{ value_handle }}" style="background-color: {{ value }};"></span>
                            {% endif %}
                            <span class="variant-swatch-name">{{ value }}</span>
                          </div>
                        </label>

                      {% else %}
                        <label 
                          for="option-{{ option.position }}-{{ value_handle }}" 
                          class="variant-label"
                          data-option-label
                        >{{ value }}</label>
                      {% endif %}
                    {% endfor %}
                  </div>
                </fieldset>
              {% endfor %}
            {% endunless %}
          {% when 'description' %}
            <p class="product-description">{{ product.description }}</p>
          {% when 'add_to_cart' %}
            {%- liquid
              assign default_text = block.settings.add_to_cart_text | default: "Add to Cart"
            -%}
            {% form 'product', product, id: 'product-form' %}
              <input type="hidden" name="id" id="ProductVariantId" value="{{ product.selected_or_first_available_variant.id }}">
              <button type="submit" id="AddToCartButton" class="add-to-cart-btn" data-default-text="{{ default_text }}" {% if product.selected_or_first_available_variant.available == false %}disabled{% endif %}>
                <span id="AddToCartText">
                  {% if product.selected_or_first_available_variant.available %}
                    {{ default_text }}
                  {% else %}
                    Sold Out
                  {% endif %}
                </span>
              </button>
            {% endform %}
        {% endcase %}
      {% endfor %}
    </div>
  </div>
</div>

{% schema %}
{
  "name": "Main Product",
  "blocks": [
    { "type": "@app" },
    { "type": "title", "name": "Title", "limit": 1 },
    { "type": "price", "name": "Price", "limit": 1 },
    { "type": "variant_picker", "name": "Variant Picker", "limit": 1 },
    { "type": "description", "name": "Description", "limit": 1 },
    { "type": "add_to_cart", "name": "Add to Cart Button", "limit": 1,
      "settings": [
        { "type": "text", "id": "add_to_cart_text", "label": "Add to Cart Button Text", "default": "Add to Cart" }
      ]
    }
  ],
   "presets": [
    { "name": "Main Product", "category": "Product",
      "blocks": [
        { "type": "title" },
        { "type": "price" },
        { "type": "variant_picker" },
        { "type": "add_to_cart" },
        { "type": "description" }
      ]
    }
  ]
}
{% endschema %}

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const cartDrawer = document.querySelector('sidebar-drawer');
    const productForm = document.getElementById('product-form');
    productForm?.addEventListener('submit', function(event) {
      event.preventDefault(); 
      fetch('/cart/add.js', {
        method: 'POST',
        body: new FormData(productForm)
      })
      .then(response => response.json())
      .then(() => {
        updateAndOpenDrawer();
      }).catch(error => console.error('Error:', error));
    });
    cartDrawer?.querySelector('.sidebar-drawer__close-btn')?.addEventListener('click', () => cartDrawer.classList.remove('is-open'));
    cartDrawer?.querySelector('.sidebar-overlay')?.addEventListener('click', () => cartDrawer.classList.remove('is-open'));
    function updateAndOpenDrawer() {
      fetch('/cart.js').then(response => response.json()).then(cart => {
        const container = cartDrawer.querySelector('[data-cart-items-container]');
        const template = cartDrawer.querySelector('[data-cart-item-template]');
        container.innerHTML = '';
        cart.items.forEach(item => {
          const itemHtml = template.innerHTML
            .replace('{KEY}', item.key)
            .replace(/{IMAGE_URL}/g, item.image)
            .replace(/{PRODUCT_TITLE}/g, item.product_title)
            .replace('{PRICE}', new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' }).format(item.final_price / 100))
            .replace('{QUANTITY}', item.quantity);
          container.innerHTML += itemHtml;
        });
        const moneyFormat = new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' });
        cartDrawer.querySelector('[data-cart-subtotal]').textContent = moneyFormat.format(cart.total_price / 100);
        cartDrawer.querySelector('[data-cart-total]').textContent = moneyFormat.format(cart.total_price / 100);
        cartDrawer.classList.add('is-open');
      });
    }
  });
</script>

{% stylesheet %}
html, body {
  margin: 0;
  padding: 0;
  overflow-x: hidden;
}
.visually-hidden {
  position: absolute;
  overflow: hidden;
  clip: rect(0 0 0 0);
  height: 1px;
  width: 1px;
  margin: -1px;
  padding: 0;
  border: 0;
}
.container {
  max-width: 1200px;
  margin: 0 auto;
  width: 100%;
  box-sizing: border-box;
  padding: 0 16px;
}
.product-page {
  display: flex;
  flex-wrap: wrap;
  align-items: flex-start;
  margin: 40px auto;
  background: #fff;
  border-radius: 8px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.07);
  overflow: hidden;
}
.product-image-gallery {
  flex: 2; 
  min-width: 300px;
  padding: 32px;
  background: #f7f7f7;
  display: flex;
  align-items: center;
  justify-content: center;
}
.product-details {
  flex: 1; 
  min-width: 300px;
  padding: 32px;
  display: flex;
  flex-direction: column;
  justify-content: center;
}
.product-image img {
  width: 100%;
  height: 500px;
  max-width: 450px;
  border-radius: 8px;
  object-fit: contain;
}
.product-image {
  max-width: 100%;
}
.product-title {
  font-size: 2rem;
  margin-bottom: 16px;
  color: #333;
}
.product-price {
  font-size: 1.5rem;
  color: #2d2d2d;
  margin-bottom: 24px;
}
.variant-fieldset {
  border: none;
  padding: 0;
  margin: 0 0 24px 0;
}
.variant-legend {
  font-weight: bold;
  margin-bottom: 12px;
  font-size: 1rem;
}
.variant-options {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
}
.variant-label {
  display: inline-block;
  padding: 8px 16px;
  border: 1px solid #ccc;
  border-radius: 4px;
  cursor: pointer;
  transition: all 0.2s ease;
}

/* --- MODIFIED: Styles for color swatches --- */
.variant-label--color {
  padding: 0;
  border: 1px solid transparent; /* Border is shown on the image inside */
  border-radius: 4px;
  width: auto;
  height: auto;
}

.variant-label--color.active .color-swatch-image {
  outline: 3px solid #0070f3;
  outline-offset: 2px;
}

/* --- NEW: Wrapper for swatch image and its name --- */
.swatch-content-wrapper {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 6px;
  padding: 4px;
}

.color-swatch-image {
  width: 55px; /* Fixed size for the round image */
  height: 55px;
  object-fit: cover;
  border-radius: 50%;
  border: 1px solid #ccc;
}

/* --- NEW: Style for the color name under the swatch --- */
.variant-swatch-name {
  font-size: 0.8rem;
  color: #333;
  text-align: center;
}

.add-to-cart-btn {
  padding: 12px 32px;
  background: #0070f3;
  color: #fff;
  border: none;
  border-radius: 4px;
  font-size: 1rem;
  cursor: pointer;
  transition: background 0.2s ease;
}
.add-to-cart-btn:hover:not([disabled]) {
  background: #005bb5;
}
.add-to-cart-btn:disabled {
  background-color: #ccc;
  cursor: not-allowed;
}
.product-description {
  margin-top: 16px;
  font-size: 1rem;
  color: #555;
  line-height: 1.6;
}
@media (max-width: 768px) {
  .product-page {
    flex-direction: column;
  }
}
sidebar-drawer {
  position: fixed;
  top: 0;
  right: 0;
  width: 100%;
  height: 100%;
  z-index: 1000;
  visibility: hidden;
  transition: visibility 0.3s;
}
sidebar-drawer.is-open {
  visibility: visible;
}
.sidebar-overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
  opacity: 0;
  transition: opacity 0.3s;
}
sidebar-drawer.is-open .sidebar-overlay {
  opacity: 1;
}
.sidebar-drawer__container {
  position: absolute;
  top: 0;
  right: 0;
  width: 100%;
  max-width: 420px;
  height: 100%;
  background-color: #fff;
  transform: translateX(100%);
  transition: transform 0.3s;
  display: flex;
  flex-direction: column;
}
sidebar-drawer.is-open .sidebar-drawer__container {
  transform: translateX(0);
}
.sidebar-drawer__header {
  padding: 16px 20px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  border-bottom: 1px solid #e5e5e5;
}
.sidebar-drawer__content {
  flex-grow: 1;
  overflow-y: auto;
  padding: 20px;
}
.sidebar-drawer__footer {
  padding: 20px;
  border-top: 1px solid #e5e5e5;
}
.cart-summary {
  display: flex;
  justify-content: space-between;
  margin-bottom: 10px;
}
.checkout-btn {
  display: block;
  width: 100%;
  text-align: center;
  background: #0070f3;
  color: white;
  padding: 14px;
  text-decoration: none;
  border-radius: 4px;
  margin-top: 16px;
}
.cart-item {
  display: flex;
  gap: 16px;
  margin-bottom: 20px;
  align-items: center;
}
.cart-item__image img {
  width: 90px;
  height: 90px;
  object-fit: cover;
  border-radius: 4px;
}
{% endstylesheet %}