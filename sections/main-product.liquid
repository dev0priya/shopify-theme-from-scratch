{% comment %}
  The JavaScript does not need to be changed.
{% endcomment %}
<script>
  class VariantSelector extends HTMLElement {
    constructor() {
      super();
      this.addEventListener('change', this.onVariantChange);
      this.variantData = JSON.parse(this.querySelector('[type="application/json"]').textContent);
    }

    onVariantChange() {
      this.updateSelectedVariant();
      if (!this.currentVariant) return;
      this.updateURL();
      this.updateFeaturedImage();
      this.updatePrice();
      this.updateAddToCartButton();
    }

    updateSelectedVariant() {
      const options = Array.from(this.querySelectorAll('input[type=radio]:checked'), (input) => input.value);
      this.currentVariant = this.variantData.find((variant) => {
        return !variant.options.map((option, index) => {
          return options[index] === option;
        }).includes(false);
      });
    }

    updateURL() {
      if (!this.currentVariant) return;
      window.history.replaceState({}, '', `${this.dataset.url}?variant=${this.currentVariant.id}`);
    }

    updateFeaturedImage() {
      const mainImage = document.getElementById('MainProductImage');
      if (!this.currentVariant || !this.currentVariant.featured_image) return;
      mainImage.src = this.currentVariant.featured_image.src;
      mainImage.alt = this.currentVariant.featured_image.alt;
    }

    updatePrice() {
      const priceElement = document.getElementById('ProductPrice');
      if (!this.currentVariant) return;
      priceElement.textContent = new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' }).format(this.currentVariant.price / 100);
    }

    updateAddToCartButton() {
      const addButton = document.getElementById('AddToCartButton');
      const addButtonText = document.getElementById('AddToCartText');
      const variantIdInput = document.getElementById('ProductVariantId');

      if (!this.currentVariant) {
        addButton.setAttribute('disabled', true);
        addButtonText.textContent = 'Unavailable';
      } else if (!this.currentVariant.available) {
        addButton.setAttribute('disabled', true);
        addButtonText.textContent = 'Sold Out';
      } else {
        addButton.removeAttribute('disabled');
        const defaultText = addButton.dataset.defaultText || 'Add to Cart';
        addButtonText.textContent = defaultText;
        variantIdInput.value = this.currentVariant.id;
      }
    }
  }

  customElements.define('variant-selector', VariantSelector);

  function initializeImageThumbnails() {
    const mainImage = document.getElementById('MainProductImage');
    const thumbnails = document.querySelectorAll('.thumbnail-item');
    thumbnails.forEach(thumb => {
      thumb.addEventListener('click', function(event) {
        event.preventDefault();
        const newSrc = this.dataset.imageSrc;
        mainImage.src = newSrc;

        thumbnails.forEach(t => t.classList.remove('active'));
        this.classList.add('active');
      });
    });
  }

  document.addEventListener('DOMContentLoaded', initializeImageThumbnails);
</script>


<div class="container">
  <div class="product-page">
    <div class="product-image-gallery">
      <div class="product-image">
        <img id="MainProductImage" src="{{ product.featured_image | image_url: width: 800 }}" alt="{{ product.title }}">
      </div>
      <div class="product-thumbnails">
        {% for image in product.images %}
          <a href="#" class="thumbnail-item {% if forloop.first %}active{% endif %}" data-image-src="{{ image | image_url: width: 800 }}">
            <img src="{{ image | image_url: width: 100 }}" alt="{{ image.alt | escape }}">
          </a>
        {% endfor %}
      </div>
    </div>

    <div class="product-details">
      {% for block in section.blocks %}
        {% case block.type %}
          {% when 'title' %}
            <h1 class="product-title">{{ product.title }}</h1>
          {% when 'price' %}
            <p id="ProductPrice" class="product-price">{{ product.price | money }}</p>
          {% when 'variant_picker' %}
            {% unless product.has_only_default_variant %}
              <variant-selector data-url="{{ product.url }}">
                <script type="application/json">
                  {{ product.variants | json }}
                </script>
                {% for option in product.options_with_values %}
                  <fieldset class="variant-fieldset">
                    <legend class="variant-legend">{{ option.name }}</legend>
                    <div class="variant-options">
                      {% for value in option.values %}
                        <input type="radio" id="option-{{ option.position }}-{{ value | handle }}" name="option-{{ option.position }}" value="{{ value }}" {% if option.selected_value == value %}checked{% endif %}>
                        <label for="option-{{ option.position }}-{{ value | handle }}" class="variant-label">{{ value }}</label>
                      {% endfor %}
                    </div>
                  </fieldset>
                {% endfor %}
              </variant-selector>
            {% endunless %}

          {% comment %} --- START: Color Swatch Section --- {% endcomment %}
          {% when 'color_swatch' %}
            {%- liquid
              assign color_option = product.options_with_values | where: 'name', 'Color' | first
              if color_option != blank
                assign images_by_color_json = product.images | group_by: 'alt' | json
              endif
            -%}

            {% if color_option != blank %}
              <script id="ColorSwatchData" type="application/json">
                {{ images_by_color_json }}
              </script>

              <div class="color-swatch-container">
                <p class="color-swatch-label">Color: <span id="SelectedColorName">{{ product.featured_image.alt }}</span></p>
                <div class="color-swatch-options">
                  {% for value in color_option.values %}
                    {% assign swatch_image = product.images | where: 'alt', value | first %}
                    <button
                      class="color-swatch-item {% if product.featured_image.alt == value %}active{% endif %}"
                      data-color="{{ value | escape }}"
                      aria-label="Select color {{ value | escape }}"
                      style="background-image: url('{{ swatch_image | image_url: width: 50 }}');"
                    >
                    </button>
                  {% endfor %}
                </div>
              </div>
            {% endif %}
          {% comment %} --- END: Color Swatch Section --- {% endcomment %}

          {% when 'description' %}
            <p class="product-description">{{ product.description }}</p>
          {% when 'add_to_cart' %}
            {%- liquid
              assign default_text = block.settings.add_to_cart_text | default: "Add to Cart"
            -%}
            {% form 'product', product, id: 'product-form' %}
              <input type="hidden" name="id" id="ProductVariantId" value="{{ product.selected_or_first_available_variant.id }}">
              <button type="submit" id="AddToCartButton" class="add-to-cart-btn" data-default-text="{{ default_text }}" {% if product.selected_or_first_available_variant.available == false %}disabled{% endif %}>
                <span id="AddToCartText">
                  {% if product.selected_or_first_available_variant.available %}
                    {{ default_text }}
                  {% else %}
                    Sold Out
                  {% endif %}
                </span>
              </button>
            {% endform %}
        {% endcase %}
      {% endfor %}
    </div>
  </div>

  {%- liquid
    assign variant_images = product.variants | map: 'featured_image' | where: 'src', product.featured_image.src | uniq
    if variant_images.size > 1
      assign has_other_variants = true
    else
      assign has_other_variants = false
    endif
  -%}

  {% if has_other_variants %}
    <div class="variant-showcase">
      <h2 class="variant-showcase-title">Also Available In</h2>
      <div class="variant-showcase-grid">
        {% for image in variant_images %}
          {%- for variant in product.variants -%}
            {%- if variant.featured_image.src == image.src -%}
              {%- assign variant_for_image = variant -%}
              {%- break -%}
            {%- endif -%}
          {%- endfor -%}
          <a href="{{ variant_for_image.url }}" class="variant-showcase-item">
            <img src="{{ image | image_url: width: 400 }}" alt="{{ image.alt | escape }}" loading="lazy">
            <p class="variant-showcase-item-title">{{ variant_for_image.option1 }}</p>
          </a>
        {% endfor %}
      </div>
    </div>
  {% endif %}

</div>

{% schema %}
{
  "name": "Main Product",
  "blocks": [
    { "type": "@app" },
    { "type": "title", "name": "Title", "limit": 1 },
    { "type": "price", "name": "Price", "limit": 1 },
    { "type": "variant_picker", "name": "Variant Picker", "limit": 1 },
    { "type": "description", "name": "Description", "limit": 1 },
    { "type": "color_swatch", "name": "Color Swatch", "limit": 1 },
    { "type": "add_to_cart", "name": "Add to Cart Button", "limit": 1,
      "settings": [
        { "type": "text", "id": "add_to_cart_text", "label": "Add to Cart Button Text", "default": "Add to Cart" }
      ]
    }
  ],
   "presets": [
    { "name": "Main Product", "category": "Product",
      "blocks": [
        { "type": "title" },
        { "type": "price" },
        { "type": "variant_picker" },
        { "type": "description" },
        { "type": "color_swatch" },
        { "type": "add_to_cart" }
      ]
    }
  ]
}
{% endschema %}

<script>
  // Side Cart Drawer Script
  document.addEventListener('DOMContentLoaded', () => {
    const cartDrawer = document.querySelector('sidebar-drawer');
    const productForm = document.getElementById('product-form');

    productForm?.addEventListener('submit', function(event) {
      event.preventDefault();
      fetch('/cart/add.js', {
        method: 'POST',
        body: new FormData(productForm)
      })
      .then(response => response.json())
      .then(() => {
        updateAndOpenDrawer();
      }).catch(error => console.error('Error:', error));
    });

    cartDrawer?.querySelector('.sidebar-drawer__close-btn')?.addEventListener('click', () => cartDrawer.classList.remove('is-open'));
    cartDrawer?.querySelector('.sidebar-overlay')?.addEventListener('click', () => cartDrawer.classList.remove('is-open'));

    function updateAndOpenDrawer() {
      fetch('/cart.js').then(response => response.json()).then(cart => {
        const container = cartDrawer.querySelector('[data-cart-items-container]');
        const template = cartDrawer.querySelector('[data-cart-item-template]');

        container.innerHTML = '';

        cart.items.forEach(item => {
          const itemHtml = template.innerHTML
            .replace('{KEY}', item.key)
            .replace(/{IMAGE_URL}/g, item.image)
            .replace(/{PRODUCT_TITLE}/g, item.product_title)
            .replace('{PRICE}', new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' }).format(item.final_price / 100))
            .replace('{QUANTITY}', item.quantity);
          container.innerHTML += itemHtml;
        });

        const moneyFormat = new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' });
        cartDrawer.querySelector('[data-cart-subtotal]').textContent = moneyFormat.format(cart.total_price / 100);
        cartDrawer.querySelector('[data-cart-total]').textContent = moneyFormat.format(cart.total_price / 100);

        cartDrawer.classList.add('is-open');
      });
    }
  });

  // Color Swatch Script
  document.addEventListener('DOMContentLoaded', () => {
    const colorSwatchDataElement = document.getElementById('ColorSwatchData');
    if (!colorSwatchDataElement) return;

    const imagesByColor = JSON.parse(colorSwatchDataElement.textContent);
    const swatchOptions = document.querySelector('.color-swatch-options');

    swatchOptions.addEventListener('click', (event) => {
      const swatch = event.target.closest('.color-swatch-item');
      if (!swatch) return;

      const color = swatch.dataset.color;
      selectColor(swatch, color);
    });

    function selectColor(activeSwatch, color) {
      const mainImage = document.getElementById('MainProductImage');
      const thumbnailsContainer = document.querySelector('.product-thumbnails');
      const selectedColorName = document.getElementById('SelectedColorName');

      if (!mainImage || !thumbnailsContainer) return;

      document.querySelectorAll('.color-swatch-item').forEach(s => s.classList.remove('active'));
      activeSwatch.classList.add('active');

      if (selectedColorName) {
        selectedColorName.textContent = color;
      }

      const newImages = imagesByColor[color];
      if (!newImages || newImages.length === 0) return;

      mainImage.src = newImages[0].src;

      thumbnailsContainer.innerHTML = '';
      newImages.forEach((image, index) => {
        const thumbLink = document.createElement('a');
        thumbLink.href = '#';
        thumbLink.classList.add('thumbnail-item');
        if (index === 0) {
          thumbLink.classList.add('active');
        }
        thumbLink.dataset.imageSrc = image.src;

        const thumbImg = document.createElement('img');
        thumbImg.src = image.src.replace(/(\.jpg|\.png|\.gif|\.jpeg)/, '_100x$1');
        thumbImg.alt = image.alt;

        thumbLink.appendChild(thumbImg);
        thumbnailsContainer.appendChild(thumbLink);
      });

      initializeImageThumbnails();
    }
  });
</script>

{% stylesheet %}
html, body {
  margin: 0; padding: 0;
  overflow-x: hidden;
}
.container {
  max-width: 1200px;
  margin: 0 auto;
  width: 100%;
  box-sizing: border-box; padding: 0 16px;
}
.product-page {
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  margin: 40px auto;
  background: #fff;
  border-radius: 8px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.07);
  overflow: hidden;
}
.product-image-gallery {
  flex: 1;
  display: flex;
  flex-direction: column;
  padding: 32px;
  background: #f7f7f7;
  height: 600px;
}
.product-image {
  flex: 1;
  display: flex;
  align-items: center;
  justify-content: center;
  height: 400px;
}
.product-image img {
  width: 50%;
  height: 100%;
  max-width: 450px;
  border-radius: 8px;
  object-fit: cover;
}
.product-thumbnails {
  display: flex;
  flex-direction: row;
  justify-content: center;
  gap: 12px;
  margin-top: 20px;
}
.thumbnail-item {
  width: 150px;
  height: 150px;
  border: 2px solid transparent;
  border-radius: 4px;
  cursor: pointer;
  overflow: hidden;
  transition: border-color 0.2s ease;
}
.thumbnail-item:hover { border-color: #ccc; }
.thumbnail-item.active { border-color: #0070f3; }
.thumbnail-item img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}
.product-details {
  flex: 1;
  padding: 32px;
  display: flex;
  flex-direction: column;
  justify-content: center;
}
.product-title {
  font-size: 2rem;
  margin-bottom: 16px;
  color: #333;
}
.product-price {
  font-size: 1.5rem;
  color: #2d2d2d;
  margin-bottom: 24px;
}
.variant-fieldset {
  border: none;
  padding: 0;
  margin: 0 0 24px 0;
}
.variant-legend {
  font-weight: bold;
  margin-bottom: 12px;
  font-size: 1rem;
}
.variant-options {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
}
.variant-options input[type="radio"] { display: none; }
.variant-label {
  display: inline-block;
  padding: 8px 16px;
  border: 1px solid #ccc;
  border-radius: 4px;
  cursor: pointer;
  transition: all 0.2s ease;
}
.variant-options input[type="radio"]:checked + .variant-label {
  border-color: #0070f3;
  background-color: #0070f3;
  color: #fff;
}
.add-to-cart-btn {
  padding: 12px 32px;
  background: #0070f3;
  color: #fff;
  border: none;
  border-radius: 4px;
  font-size: 1rem;
  cursor: pointer; transition: background 0.2s ease;
}
.add-to-cart-btn:hover:not([disabled]) { background: #005bb5; }
.add-to-cart-btn:disabled {
  background-color: #ccc;
  cursor: not-allowed;
}
.product-description {
  margin-top: 16px;
  font-size: 1rem;
  color: #555;
  line-height: 1.6;
}
.variant-showcase {
  margin-top: 40px;
  padding-top: 40px;
  border-top: 1px solid #e5e5e5;
  text-align: center;
}
.variant-showcase-title {
  font-size: 1.8rem;
  margin-bottom: 24px;
  color: #333;
}
.variant-showcase-grid {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 20px;
}
.variant-showcase-item {
  text-decoration: none;
  color: #333;
  border: 1px solid #e5e5e5;
  border-radius: 8px;
  overflow: hidden;
  transition: box-shadow 0.2s ease, transform 0.2s ease;
}
.variant-showcase-item:hover {
  transform: translateY(-5px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}
.variant-showcase-item img {
  display: block;
  width: 100%;
  max-width: 200px;
  height: auto;
}
.variant-showcase-item-title {
  padding: 12px;
  margin: 0;
  font-size: 0.9rem;
  background: #f9f9f9;
}
@media (max-width: 900px) {
  .product-page { flex-direction: column; }
  .product-details { padding: 16px; }
  .product-title { font-size: 1.8rem; }
  .product-price { font-size: 1.4rem; }
  .add-to-cart-btn { font-size: 0.9rem; padding: 10px 24px; }
}
@media (max-width: 600px) {
  .product-title { font-size: 1.6rem; }
  .product-price { font-size: 1.2rem; }
  .add-to-cart-btn { font-size: 0.85rem; padding: 8px 20px; }
  .product-description { font-size: 0.9rem; }
}

/* --- START: Side Cart Drawer CSS --- */
sidebar-drawer {
  position: fixed;
  top: 0; right: 0; width: 100%; height: 100%; z-index: 1000; visibility: hidden; transition: visibility 0.3s;
}
sidebar-drawer.is-open { visibility: visible; }
.sidebar-overlay {
  position: absolute; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.5); opacity: 0;
  transition: opacity 0.3s;
}
sidebar-drawer.is-open .sidebar-overlay { opacity: 1; }
.sidebar-drawer__container {
  position: absolute; top: 0; right: 0; width: 100%;
  max-width: 420px; height: 100%; background-color: #fff; transform: translateX(100%); transition: transform 0.3s; display: flex; flex-direction: column;
}
sidebar-drawer.is-open .sidebar-drawer__container { transform: translateX(0); }
.sidebar-drawer__header { padding: 16px 20px; display: flex; justify-content: space-between; align-items: center; border-bottom: 1px solid #e5e5e5; }
.sidebar-drawer__content { flex-grow: 1; overflow-y: auto; padding: 20px; }
.sidebar-drawer__footer { padding: 20px; border-top: 1px solid #e5e5e5; }
.cart-summary { display: flex; justify-content: space-between; margin-bottom: 10px; }
.checkout-btn { display: block; width: 100%; text-align: center; background: #0070f3; color: white; padding: 14px; text-decoration: none; border-radius: 4px; margin-top: 16px; }
.cart-item { display: flex; gap: 16px; margin-bottom: 20px; align-items: center; }
.cart-item__image img { width: 90px; height: 90px; object-fit: cover; border-radius: 4px; }
/* --- END: Side Cart Drawer CSS --- */

/* --- START: Color Swatch CSS --- */
.color-swatch-container {
  margin-top: 24px;
}
.color-swatch-label {
  font-weight: bold;
  margin-bottom: 12px;
  font-size: 1rem;
  color: #333;
}
.color-swatch-options {
  display: flex;
  flex-wrap: wrap;
  gap: 12px;
}
.color-swatch-item {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  border: 2px solid #e5e5e5;
  cursor: pointer;
  transition: all 0.2s ease;
  background-size: cover;
  background-position: center;
  padding: 0;
}
.color-swatch-item:hover {
  border-color: #ccc;
}
.color-swatch-item.active {
  border-color: #0070f3;
  box-shadow: 0 0 0 2px #fff, 0 0 0 4px #0070f3;
}
/* --- END: Color Swatch CSS --- */
{% endstylesheet %}